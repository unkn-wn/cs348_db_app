// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Ingredient(id (PK), name)
// Recipe(id (PK), name, description, prepTime, cuisineType)
// RecipeIngredient(id (PK), recipeId (FK -> Recipe.id), ingredientId (FK -> Ingredient.id), quantity, unit)
// User(id (PK), username, password)
// Rating(id (PK), score, userId (FK -> User.id), recipeId (FK -> Recipe.id))

model Ingredient {
  id      Int                @id @default(autoincrement())
  name    String             @unique // Ingredient names should be unique
  recipes RecipeIngredient[] // Many-to-many relationship with Recipe
}

model Recipe {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  prepTime          Int
  cuisineType       String?
  recipeIngredients RecipeIngredient[] // Many-to-many relationship with Ingredient
  ratings           Rating[] // One to many: each recipe can receive multiple ratings
  favoritedBy       User[]             @relation("Favorites") // Many-to-many with User (favorites)

  @@index([cuisineType], type: Hash)
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  quantity     Float
  unit         String

  @@unique([recipeId, ingredientId]) // one ingredient per recipe
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String // no encryption yet
  ratings   Rating[] // One to many: a user can rate multiple recipes
  favorites Recipe[] @relation("Favorites") // Many-to-many with Recipe (favorites)
}

model Rating {
  id       Int @id @default(autoincrement())
  score    Int // rating out of 5
  userId   Int
  recipeId Int

  user   User   @relation(fields: [userId], references: [id]) // One-to-many with User
  recipe Recipe @relation(fields: [recipeId], references: [id]) // One-to-many with Recipe

  @@unique([userId, recipeId])
  @@index([recipeId, score])
}